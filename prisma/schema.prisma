datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

model User { 
  name  String 
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  role      Role     @default(BASIC)
  image String   @default("#")

  //relations
  userCredential UserCredentials?
  carts          Cart[]
  favorites      Favorite[]
  comments       Review[]
  rating         Rating[]

  //indexex
  @@index([id, email])
  @@unique([id, name])
}

//user related models

model UserCredentials {
  updatedAt DateTime @updatedAt()
  password  String
  userId    String   @id

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id String @id

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    CartStatus @default(PENDING)

  //relations
  products CartItem[]
  user     User       @relation(fields: [id], references: [id], onDelete: Cascade)

  //index
  @@index([id])
}

//cart related models

model CartItem {
  id String @id @default(uuid())

  quantity   Int @default(0)
  product_id String
  cart_id    String

  //relations
  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  //index
  @@index([id])

  @@unique([product_id, cart_id])
}

model Product {
  id String @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name         String
  description  String
  title        String
  price        Float
  img          String
  quantity     Int
  is_available Boolean @default(true)

  category_name String?
  brand_id      String?

  //relations
  attributes Attributes?

  favorites Favorite[]
  comments  Review[]
  rating    Rating[]
  cart_item CartItem[]

  brand    Brand?    @relation(fields: [brand_id], references: [name], onDelete: Cascade)
  category Category? @relation(fields: [category_name], references: [name])

  //indexes
  @@index([id, name])
}

//product and user related models
model Review {
  id String @id @default(uuid())
  userName String

  message    String
  userId     String 
  product_id String

  //relations
  //review does not need to be attached with a rating
  Rating Rating? 
  user    User    @relation(fields: [userId, userName], references: [id, name], onDelete: Cascade) 
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  //indexes
  @@index([id])
  @@unique([userId, product_id])
}

model Rating {
  id String @id @default(uuid())

  rate Float

  user_id    String
  product_id String
  review_id String @unique
  //rating need to be attached with a review



  //relations
  review Review @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  //block attributes
  @@unique([product_id, user_id])
  //indexes
  @@index([id])
}

model Favorite {
  id String @id @default(uuid())

  user_id    String
  product_id String

  //relations
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  //block attributes
  @@unique([product_id, user_id])
  //indexes
  @@index([id])
}

//product related models
model Category {
  name String @id

  description String?
  image       String?

  is_active Boolean @default(true)

  //relations
  product Product[]

  //indexes
  @@index([name])
}

model Brand {
  name String @id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  description String
  logo        String

  //relations
  product_id Product[]

  //indexes
  @@index([name])
}

model Attributes {
  id String @id @default(uuid())

  primary_color   String?
  secondary_color String?
  size            String?
  material        String?
  weight          String?
  dimensions      String?
  features        String?

  product_id String @unique

  //relations
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

//enums
enum Role {
  ADMIN
  BASIC
}

enum CartStatus {
  PENDING
  COMPLETED
  CANCELED
}
